class AuthService {
    constructor() {
        this.users = [
            { username: 'admin', password: 'admin123', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', avatar: 'üë®‚Äçüíº' },
            { username: 'manager', password: 'manager123', name: '–ú–µ–Ω–µ–¥–∂–µ—Ä', avatar: 'üë©‚Äçüíº' },
            { username: 'analyst', password: 'analyst123', name: '–ê–Ω–∞–ª–∏—Ç–∏–∫', avatar: 'üßë‚Äçüíª' }
        ];
        this.currentUser = null;
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö
        const savedUser = localStorage.getItem('currentUser') || 
                         sessionStorage.getItem('currentUser');
        
        if (savedUser) {
            try {
                this.currentUser = JSON.parse(savedUser);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
                if (!this.users.find(u => u.username === this.currentUser.username)) {
                    this.logout();
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                this.logout();
            }
        }
    }

    login(username, password, remember) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const user = this.users.find(u => 
                    u.username === username && u.password === password
                );
                
                if (user) {
                    this.currentUser = user;
                    const userData = JSON.stringify(user);
                    
                    if (remember) {
                        localStorage.setItem('currentUser', userData);
                        localStorage.setItem('rememberMe', 'true');
                    } else {
                        sessionStorage.setItem('currentUser', userData);
                        localStorage.removeItem('rememberMe');
                    }
                    
                    resolve(user);
                } else {
                    reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
                }
            }, 300); // –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        });
    }

    logout() {
        this.currentUser = null;
        localStorage.removeItem('currentUser');
        localStorage.removeItem('rememberMe');
        sessionStorage.removeItem('currentUser');
    }

    isAuthenticated() {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if (this.currentUser) {
            return !!this.users.find(u => u.username === this.currentUser.username);
        }
        return false;
    }

    getCurrentUser() {
        return this.currentUser;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    checkAuth() {
        if (!this.isAuthenticated() && !window.location.pathname.includes('login.html')) {
            window.location.href = 'login.html';
        }
    }
}

const authService = new AuthService();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
authService.checkAuth();